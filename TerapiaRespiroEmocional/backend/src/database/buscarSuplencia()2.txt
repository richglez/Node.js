Estoy creando una app web desde angular usando angular para el frontend y nodejs para el backend y MYSQL para una conexion de base de datos, la app ya se encuentra operando, tengo varios componenetes uno de ellos se llama (calendario-servicios) en este servicio estoy tratando de emular una calendario donde se puedan crear suplencias que serian los eventos en terminos de agendar en los calendarios como lo hace google calendar y asi, pero en angular estoy usando la herramienta de (fullcalendar).
Bien para agendar una nueva suplencia estoy usando otra herramienta de angular llamada (MatDialogRef), donde mi ventanilla la estoy programando desde otro componenete llamado (nueva-suplencia-dialog.component) donde este componente se encargara de un pequeno formulario para poder registrar las suplencias en una tabla de mi base de datos (suplencias), esta formulario recopilara todos los datos de mi tabla, estas suplencias se le asginan a un cuidador en especifico, para luego poder buscar esas suplencias apartir de un cuidador y un paciente que el cuidador esta cuidando, osea cada paciente tiene a un cuidador y un cuidador puede tener varios pacientes y asi, para que luego se haga una validacion en el boton de buscar todas las suplencias que tiene el cuidador con ese paciente seleccionado y asi

Ya tengo creado mi componente y mi formulario ya funciona para poder registrar nuevas suplencias y el filtrado de cuidaodres con sus pacientes en especificos tambien, lo que falta es poder programar el boton de buscarSuplencia(), para que asi muestre el o los eventos en el calendario apartir de la fecha y la hora inicial y la hora final, como puedo programar el boton de buscar suplencias y el calendario este programado y no se vea solo de adorno, porque nadamas me muestra la fecha actual y eso no quiero,


como puedo programar que este boton pueda refleja el evento en el calendario?

osea por ejemplo quiero que se refleje en mi calendario los eventos(suplencias) las suplencias que tengo en mi base de datos:


mysql> SELECT * FROM suplencias;
+--------------+---------------+--------------+------------+--------------+------------+----------------------+-------------+
| id_suplencia | dia_suplencia | hora_inicial | hora_final | costoGuardia | particular | id_cuidador_paciente | id_paciente |
+--------------+---------------+--------------+------------+--------------+------------+----------------------+-------------+
|            1 | 2024-05-03    | 10:00        | 16:00      |          500 | si         |                    1 |        NULL |
+--------------+---------------+--------------+------------+--------------+------------+----------------------+-------------+
1 row in set (0.00 sec)


mysql> DESCRIBE suplencias;
+----------------------+--------------+------+-----+---------+----------------+
| Field                | Type         | Null | Key | Default | Extra          |
+----------------------+--------------+------+-----+---------+----------------+
| id_suplencia         | int unsigned | NO   | PRI | NULL    | auto_increment |
| dia_suplencia        | date         | YES  |     | NULL    |                |
| hora_inicial         | varchar(255) | YES  |     | NULL    |                |
| hora_final           | varchar(255) | YES  |     | NULL    |                |
| costoGuardia         | int          | YES  |     | NULL    |                |
| particular           | varchar(80)  | YES  |     | NULL    |                |
| id_cuidador_paciente | int unsigned | YES  | MUL | NULL    |                |
| id_paciente          | int unsigned | YES  | MUL | NULL    |                |
+----------------------+--------------+------+-----+---------+----------------+
8 rows in set (0.00 sec)


CODIGO HTML DEL COMPONENTE DEL CALENDARIO
- Este es mi boton que quiero programar con el fullcalendar
<button class="btnSuplencia" (click)="agregarSuplencia()">
  Agregar Suplencias
</button>


<!----------------Select cuidador-------------------->
<div class="select-cuidador" (click)="toggleSelect()">
  <div class="select-btn">
    <span class="sBtn-text">{{
      searchTextCuidadores || "Seleccionar cuidador"
    }}</span>
    <i
      class="bx"
      [class.bx-chevron-down]="!selectAbierto"
      [class.bx-chevron-up]="selectAbierto"
    ></i>
  </div>
  <ul class="options" *ngIf="selectAbierto">
    <li
      class="option"
      *ngFor="let cuidador of cuidadores"
      (click)="seleccionarCuidador(cuidador)"
    >
      <i class="bx bxs-user-badge"></i>
      <span class="option-namePaciente"
        >{{ cuidador.nombreCuidador }} {{ cuidador.apPatCuidador }}
        {{ cuidador.apMatCuidador }}</span
      >
    </li>
  </ul>
</div>

<!----------------suplencias-------------------->
<div class="suplencias">
  <div class="select-btn2">
    <span class="sBtn-text">{{
      "Total de suplencias:  " + searchTextTotalSuplencias
    }}</span>
  </div>
</div>

<!----------------Select paciente-------------------->
<div class="select-paciente" (click)="toggleSelect2()">
  <div class="select-btn">
    <span class="sBtn-text">{{
      searchTextPacientes || "Seleccionar paciente"
    }}</span>
    <i
      class="bx"
      [class.bx-chevron-down]="!selectAbierto2"
      [class.bx-chevron-up]="selectAbierto2"
    ></i>
  </div>
  <ul class="options" *ngIf="selectAbierto2">
    <li
      class="option"
      *ngFor="let paciente of filteredPacientes"
      (click)="seleccionarPaciente(paciente)"
    >
      <i class="bx bxs-user-badge"></i>
      <span class="option-namePaciente"
        >{{ paciente.nombre_paciente }} {{ paciente.apellido_paterno }}
        {{ paciente.apellido_materno }}</span
      >
    </li>
  </ul>
</div>

<button class="btnBuscarSuplencia" (click)="buscarSuplencia()">
  Buscar Suplencias
</button>

<div class="calendar-container">
  <full-calendar
    [options]="options"
    [events]="events"
    class="custom-calendar"
  ></full-calendar>
</div>




CODIGO TYPECRIPT DEL COMPONENTE

import { Component, OnInit } from '@angular/core';
import esLocale from '@fullcalendar/core/locales/es';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import { PacientesService } from '../../services/pacientes.service';
import { Suplencia } from '../../models/suplencias';
import { MatDialog } from '@angular/material/dialog';
import { NuevaSuplenciaDialogComponent } from '../nueva-suplencia-dialog/nueva-suplencia-dialog.component';
import { CuidadoresServiceService } from '../../services/cuidadores-service.service';
import { Cuidador } from '../../models/cuidadores';
import { Paciente } from '../../models/pacientes';

@Component({
  selector: 'app-calendario-servicios',
  templateUrl: './calendario-servicios.component.html',
  styleUrls: ['./calendario-servicios.component.scss'],
})
export class CalendarioServiciosComponent implements OnInit {
  public events: any[] = [];
  public options: any;
  public selectedCuidador: Cuidador | null = null;
  public selectAbierto: boolean = false;
  public selectAbierto2: boolean = false;
  public suplencias: Suplencia[] = [];
  public searchTextCuidadores: string = '';
  public searchTextPacientes: string = '';
  public searchTextTotalSuplencias: string = '';
  public cuidadores: Cuidador[] = [];
  public pacientes: Paciente[] = [];
  public filteredPacientes: Paciente[] = [];

  constructor(
    public pacientesService: PacientesService,
    public dialog: MatDialog,
    public cuidadoresService: CuidadoresServiceService
  ) {
    this.events = [];
    this.options = {
      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],
      initialView: 'dayGridMonth',
      locale: esLocale,
      headerToolbar: {
        left: 'prev,next',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay',
      },
    };
  }

  ngOnInit() {
    this.cuidadoresService.getCuidadores().subscribe(
      (cuidadores) => {
        this.cuidadores = cuidadores;
      },
      (err) => {
        console.error(err);
      }
    );
  
    this.pacientesService.getPacientes().subscribe(
      (pacientes) => {
        this.pacientes = pacientes;
        this.filteredPacientes = this.pacientes;
      },
      (err) => {
        console.error(err);
      }
    );
  }

  seleccionarCuidador(cuidador: Cuidador) {
    this.selectedCuidador = cuidador;
    this.searchTextCuidadores = `${cuidador.nombreCuidador} ${cuidador.apPatCuidador} ${cuidador.apMatCuidador}`;
    this.searchTextTotalSuplencias = cuidador.num_suplencias.toString();
    this.filteredPacientes = this.pacientes.filter(paciente => paciente.id_cuidador_paciente === cuidador.id_cuidador_paciente);
  }

  seleccionarPaciente(paciente: Paciente) {
    this.searchTextPacientes = `${paciente.nombre_paciente} ${paciente.apellido_paterno} ${paciente.apellido_materno}`;
  }

  agregarSuplencia(): void {
    const dialogRef = this.dialog.open(NuevaSuplenciaDialogComponent, {
      width: '850px',
    });

    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        this.agregarEvento(result);
      }
    });
  }

  toggleSelect() {
    this.selectAbierto = !this.selectAbierto;
  }
  
  toggleSelect2() {
    this.selectAbierto2 = !this.selectAbierto2;
  }

  buscarSuplencia() { //filtrar los pacientes asociados con un cuidador seleccionado y luego buscar suplencias espec√≠ficas relacionadas con ese cuidador
    console.log(`Estas buscando una suplencia en el calendario apartir del cuidador: ${this.searchTextCuidadores} \ny del paciente: ${this.searchTextPacientes}`); 
  }

  agregarEvento(suplencia: any): void {
    const nuevoEvento = {
      title: `Suplencia de ${suplencia.cuidador}`,
      start: `${suplencia.dia_suplencia}T${suplencia.hora_inicial}`,
      end: `${suplencia.dia_suplencia}T${suplencia.hora_final}`,
      description: `Costo: ${suplencia.costoGuardia}, Particular: ${suplencia.particular}`,
    };

    this.events = [...this.events, nuevoEvento];
  }
}


TENGO TAMBIEN UN MODELO INTERFAZ PARA MI TABLA
suplencias.ts
export interface Suplencia {
  id_suplencia?: number;
  id_cuidador_paciente: number;
  dia_suplencia: string;
  hora_inicial: string;
  hora_final: string;
  costoGuardia: number;
  particular: string;
}


Y ESTE ES EL SERVICIO DE MIS SUPLENCIAS
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'; // metodos http
import { Suplencia } from '../models/suplencias';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class SuplenciasServiceService {
  URL_API = 'http://localhost:4000/api/ccuidarte-app/suplencias';
  suplencia: Suplencia[] = [];

  selectedSuplencia: Suplencia = {
    id_cuidador_paciente: 0,
    dia_suplencia: '',
    hora_inicial: '',
    hora_final: '',
    costoGuardia: 0,
    particular: '',
  };

  constructor(private http: HttpClient) {}

  addSuplencia(
    id_cuidador_paciente: number,
    dia_suplencia: string,
    hora_inicial: string,
    hora_final: string,
    costoGuardia: number,
    particular: string
  ): Observable<any> {
    const suplencia: Suplencia = {
      id_cuidador_paciente,
      dia_suplencia,
      hora_inicial,
      hora_final,
      costoGuardia,
      particular,
    };
    console.log('Datos enviados para la nueva suplencia:', suplencia);
    return this.http.post<any>(`${this.URL_API}`, suplencia);
  }

  getSuplencias(): Observable<Suplencia[]> {
    return this.http.get<Suplencia[]>(this.URL_API);
  }
}


POR ULTIMO TE PROPORCIONO MI PROGRAMACION DESDE EL BACKEND DE LAS SUPLENCIAS

// ----------------SUPLENCIAS----------------

pacientesCtrls.getSuplencias = async (req, res) => {
    const [rows] = await pool.promise().query("SELECT * FROM suplencias");
    res.json(rows);
};


pacientesCtrls.addSuplencia = async (req, res) => {
    const {
        id_cuidador_paciente, // Aseg√∫rate de recibir el ID del cuidador desde el frontend
        dia_suplencia,
        hora_inicial,
        hora_final,
        costoGuardia,
        particular,
    } = req.body;

    try {
        console.log("Datos recibidos para la nueva suplencia:", req.body);

        // Verifica que el cuidador existe
        const [cuidador] = await pool.promise().query(
            "SELECT * FROM cuidadores WHERE id_cuidador_paciente = ?",
            [id_cuidador_paciente]
        );

        if (cuidador.length > 0) {
            console.log("Cuidador encontrado:", cuidador[0]);

            // Insertar la suplencia
            const [rows] = await pool.promise().query(
                "INSERT INTO suplencias (id_cuidador_paciente, dia_suplencia, hora_inicial, hora_final, costoGuardia, particular) VALUES (?, ?, ?, ?, ?, ?)",
                [
                    id_cuidador_paciente,
                    dia_suplencia,
                    hora_inicial,
                    hora_final,
                    costoGuardia,
                    particular,
                ]
            );

            console.log("Suplencia insertada:", rows);

            // Actualizar el n√∫mero de suplencias del cuidador
            const [updateResult] = await pool.promise().query(
                "UPDATE cuidadores SET num_suplencias = num_suplencias + 1 WHERE id_cuidador_paciente = ?",
                [id_cuidador_paciente]
            );

            console.log("N√∫mero de suplencias actualizado:", updateResult);

            res.send({
                id_cuidador_paciente,
                dia_suplencia,
                hora_inicial,
                hora_final,
                costoGuardia,
                particular,
            });
        } else {
            res.status(404).send("Cuidador no encontrado");
        }
    } catch (error) {
        console.error("Error al agregar la suplencia:", error);
        res.status(500).send("Error al agregar la suplencia");
    }
};